name: Build and Deploy React Native App

# Controls when the action will run.
on:
  push:
    branches:
      - main

  # Allows workflow to be manually triggered
  workflow_dispatch:

jobs:
  build-and-deploy-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: ./package-lock.json

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Install Node modules
        run: npm install

      - name: Decode Keystore
        run: |
          mkdir $RUNNER_TEMP/keystore
          echo ${{ secrets.SIGNING_KEY_STORE_BASE64 }} | base64 -di > $RUNNER_TEMP/keystore/upload-keystore.jks

      - name: Build Release bundle (.aab)
        env:
          SIGNING_KEY_STORE_PATH: ${{ runner.temp }}/keystore/upload-keystore.jks
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: cd android && ./gradlew bundleRelease

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-android
          path: ./android/app/build/outputs/bundle/release/
          retention-days: 5

      # https://github.com/r0adkll/upload-google-play
      - uses: r0adkll/upload-google-play@v1
        with:
          # https://help.radio.co/en/articles/6232140-how-to-get-your-google-play-json-key
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.example.app
          releaseFiles: ./android/app/build/outputs/bundle/release/app-release.aab
          track: internal

  build-and-deploy-ios:
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # [macOS] Default Xcode on macOS 14 Sonoma will be set to Xcode 15.4 on July, 22
      # [macOS] Default Xcode on macOS 13 Ventura will be set to Xcode 15.2 on July, 15

      # https://github.com/marketplace/actions/setup-xcode-version
      - name: Set up XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "^15"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: ./package-lock.json

      - name: Install Node modules
        run: npm install

      # https://github.com/ruby/setup-ruby#caching-bundle-install-automatically
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7.6"
          bundler-cache: true

      - name: Set up Pods
        uses: maxim-lobanov/setup-cocoapods@v1
        with:
          podfile-path: ./ios/Podfile.lock

      - name: Install pod dependencies
        run: |
          cd ios && pod install

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "${{ secrets.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "${{ secrets.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # echo some output
          security find-identity -v -p codesigning
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Archive iOS app
        run: |
          cd ios
          xcodebuild -workspace Example.xcworkspace -scheme Example -sdk iphoneos -configuration Release -archivePath $RUNNER_TEMP/Example.xcarchive archive

      - name: Export ipa
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/Example.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-ios
          path: ${{ runner.temp }}/build/Example.ipa
          retention-days: 5

      - name: Decode API Key
        run: |
          mkdir -p ~/private_keys
          echo -n "${{secrets.APPSTORE_API_KEY_BASE64}}" | base64 --decode -o ~/private_keys/AuthKey_${{secrets.APPSTORE_API_KEY_ID}}.p8

      - name: Upload iOS app to TestFlight
        run: xcrun altool --output-format xml --upload-app -f $RUNNER_TEMP/build/Example.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
